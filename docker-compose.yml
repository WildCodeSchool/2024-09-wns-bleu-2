services:
  db:
    image: postgis/postgis
    env_file:
      - .db.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U postgres"]
      interval: 1s
      timeout: 2s
      retries: 100
    volumes:
      - ./backend/scriptPostGIS/init.sql:/docker-entrypoint-initdb.d/init.sql
    profiles:
      - initialize
      - dev

  adminer:
    image: adminer
    depends_on:
      db:
        condition: service_healthy
    profiles:
      - initialize
      - dev

  backend:
    build: ./backend
    volumes:
      - ./backend/src:/app/src
    healthcheck:
      test: 'curl --fail --request POST --header ''content-type: application/json'' --url ''http://localhost:4000'' --data ''{"query":"query { __typename }"}'' || exit 1'
      interval: 1s
      timeout: 2s
      retries: 100
    env_file:
      - .env
      - .db.env
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "4000:4000"
    profiles:
      - dev
      - initialize

  frontend:
    build: ./frontend
    volumes:
      - ./frontend/src:/app/src
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --request GET --url 'http://localhost:5173' || exit 1"
      interval: 1s
      timeout: 2s
      retries: 100
    ports:
      - "5173:5173"
    profiles:
      - dev

  api_gateway:
    image: nginx
    ports:
      - 8000:80
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
      img:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --request GET --url 'http://localhost:4000' || exit 1"
      interval: 1s
      timeout: 2s
      retries: 100
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    profiles:
      - dev

  img :
    build: ./img
    ports:    
    - "5000:4000" 
    healthcheck:
      test: "curl --fail --request GET --url 'http://localhost:4000/' || exit 1"
      interval: 1s
      timeout: 2s
      retries: 100
    volumes:
      - ./img/uploads:/app/uploads
      - ./img/clean.js:/app/clean.js
    profiles:
      - dev

  cities:
    build:
      context: ./backend/scriptPostGIS
      dockerfile: Dockerfile
    depends_on:
      backend:
        condition: service_healthy
    env_file:
      - .db.env
    volumes:
      - ./backend/scriptPostGIS:/app/
    profiles:
      - initialize