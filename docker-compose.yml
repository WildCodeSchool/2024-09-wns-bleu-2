services:
  db:
    image: postgis/postgis
    env_file:
      - .db.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U postgres"]
      interval: 1s
      timeout: 2s
      retries: 100
    volumes:
      - ./backend/scriptPostGIS/init.sql:/docker-entrypoint-initdb.d/init.sql
    profiles:
      - initialize
      - dev

  adminer:
    image: adminer
    depends_on:
      db:
        condition: service_healthy
    profiles:
      - initialize
      - dev

  backend:
    build: ./backend
    volumes:
      - ./backend/src:/app/src
    healthcheck:
      test: 'curl --fail --request POST --header ''content-type: application/json'' --url ''http://localhost:4000'' --data ''{"query":"query { __typename }"}'' || exit 1'
      #test:
      # - CMD-SHELL
      #  - "curl -f http://backend:4000?query=%7B__typename%7D -H 'Apollo-Require-Preflight: true' || exit 1"
      interval: 1s
      timeout: 2s
      retries: 100
    env_file:
      - .env
      - .db.env
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "4000:4000"
    profiles:
      - dev
      - initialize

  frontend:
    build: ./frontend
    volumes:
      - ./frontend/src:/app/src
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --request GET --url 'http://localhost:5173' || exit 1"
      interval: 1s
      timeout: 2s
      retries: 100
    ports:
      - "5173:5173"
    profiles:
      - dev

  zap:
    image: zaproxy/zap-stable
    #command: /zap/zap.sh -daemon -host 0.0.0.0 -port 8090 -config api.disablekey=true -config database.recoverylog=false -config connection.timeoutInSecs=120 -config api.addrs.addr.name=.* -config api.addrs.addr.regex=true
    command: >
      zap-full-scan.py -t http://api_gateway -r scan-report-full.html -J report-full.json -w /zap/wrk
    depends_on:
      api_gateway:
        condition: service_healthy
    volumes:
      - ./zap-reports:/zap/wrk
    ports:
      - "8090:8090"   # API/daemon port
  #    - "8080:8080"   # Web UI port (optional)

#  zap:
#    image: zaproxy/zap-stable
#    command: 
#      - zap.sh 
#      - -host 0.0.0.0 
#      - -port 8080 
#      - -config api.disablekey=true 
#      - -config api.addrs.addr.name=.* 
#      - -config api.addrs.addr.regex=true
      # Add these lines to exclude the problematic path:
 #     - -config connection.proxyChainSkipName=.*/\.well-known/appspecific/.*
#      - -config connection.securityExceptions.sites=.*/\.well-known/appspecific/.*
#    ports:
#      - "8090:8090"   # ZAP API/daemon port
#      - "8080:8080"   # ZAP Web UI port
#    volumes:
#    - ./zap-reports:/zap/wrk
#    depends_on:
#      api_gateway:
#        condition: service_healthy

  api_gateway:
    image: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
      img:
        condition: service_healthy
    ports:
      - 8000:80
  img :
    build: ./img
    ports:
      - 8000:80
    profiles:
      - dev

  cities:
    build:
      context: ./backend/scriptPostGIS
      dockerfile: Dockerfile
    depends_on:
      backend:
        condition: service_healthy
    env_file:
      - .db.env
    volumes:
      - ./backend/scriptPostGIS:/app/
    # command: sh -c "tail -f /dev/null"
    profiles:
      - initialize